/**************** 变量提升 ****************/
//声明（变量，函数等）提升， 赋值不提升

var a=2;
//js编译阶段，先找到所有声明. var a; 
//再进行执行阶段 a=2;

//函数优先变量提升 ,如 function foo(){}
foo(); // 1 var foo; 
function foo() { console. log( 1 ); } 
foo = function() { console. log( 2 ); };
//解析为:
function foo() { console. log( 1 ); } 
foo(); // 1 
foo = function() { console. log( 2 ); };




/**************** 作用域 ****************/

// 函数作用域的含义是指，属于这个函数的全部变量都可以在整个函数的范围内使用及复用
// （事实上在嵌套的作用域中也可以使用）。
// 这种设计方案是非常有用的，能充分利用JavaScript变量可以根据需要改变值类型的“动态”特性。

//在任 意 代码 片段 外部 添加 包装 函数， 可以 将 内部 的 变量 和 函数 定义“ 隐藏” 起来， 
//外部 作用域 无法 访问 包装 函数 内部 的 任何 内容。

//函数 声明 和 函数 表达式 之间 最重要的 区别 是 它们 的 名称 标识符 将会 绑 定 在何处。
(function foo(){ // <-- 添加 这 一行  //不行。 foo 变量 名 被 隐藏 在 自身 中， 不会 非必要 地 污染 外部 作用域。
  var a = 3; 
  console. log( a ); // 3 
})(); // <-- 以及 这 一行

//函数作用域（var） 没有给for if 等划分块级作用域 
//块级作用域 with，try/catch，let



/**************** in ****************/
// 如果指定的属性在指定的对象或其原型链中，则in 运算符返回true。
